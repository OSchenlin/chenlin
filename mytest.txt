部署：
集中式
包含N个模块：一起工作
开发流程简单，排障能力较差

分布式
一个项目分为多个子系统
排障能力强，服务器集群效果佳，性能提升高！

本章目标
了解版本控制git结构知识，并掌握基本配置

掌握git常用构建指令操作本地仓库

了解git分支结构操作本地仓库

掌握GitHub远程仓库搭建操作与Windows tools使用


vss（Visual SourceSafe）
简单易用、方便高效，与Windows操作系统及微软开发功能工具高度集成

SVN（Subversion）
是开发源代码的并发版本系统，它是目前较流行的面向软件开发人员的源代码版本管理解决方法。他可以用于各种平台


GIT（分布式版本控制系统）
	是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理
       git是Linus Torvaids 为了帮助管理 Linux内核开发而开发的一个开发源代码的版本控制软件。2005年发布第一版本


特点
适合分布式开发，强调个体。快照管理，并非文件复制
公共服务器压力和数据量都不会太大。
速度快、灵活
任意两个开发者之间可以很容易的解决冲突
离线工作


Workspace ： 工作区
Index/Stage ：暂存区，也叫索引
Repository：仓库区（或本地仓库），也存储库
Remote ：远程仓库

指令
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
$ git config --list  

$ git  init 注册
$ git add 单个加入
$ git add -A 全部加入
$ git commit -m "第一次提交到版本库" 提交
$ git help commit 帮助文档
$ git status 查看当前暂缓状态
$ git log 查看历史
$ git reflog 查看永久历史
$ git reset --hard 重置 至少要有四位的版本号
$ git reset --hard HEAD ~1 回退指定
$ git rm name 删除
$ git checkout -- 文件名  （没有进入暂缓区之前可以操作）撤销
$ git branch 分支名称
$ git branch -d 分支名称 切换分支 
$ git branch 查看分支
git merge 分支名称 ――合并分支
$ git show 查看当前版本
$ git branch -d 分支名称 移除分支 （D 大写的强制删除）
$ git remote -v 查看仓库
$ git clone https://github.com/OSchenlin/chenlin.git (地址)  克隆
$ git push -u origin master -f 完全强制推荐(解决版本冲突) 把某个分支推送到远程仓库
$ git pull origin master 分支名称


2.分支管理






